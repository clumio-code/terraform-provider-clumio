// Code generated by mockery. DO NOT EDIT.

package sdkclients

import (
	apiutils "github.com/clumio-code/clumio-go-sdk/api_utils"
	mock "github.com/stretchr/testify/mock"

	models "github.com/clumio-code/clumio-go-sdk/models"
)

// MockAWSConnectionClient is an autogenerated mock type for the AWSConnectionClient type
type MockAWSConnectionClient struct {
	mock.Mock
}

type MockAWSConnectionClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAWSConnectionClient) EXPECT() *MockAWSConnectionClient_Expecter {
	return &MockAWSConnectionClient_Expecter{mock: &_m.Mock}
}

// CreateAwsConnection provides a mock function with given fields: body
func (_m *MockAWSConnectionClient) CreateAwsConnection(body *models.CreateAwsConnectionV1Request) (*models.CreateAWSConnectionResponse, *apiutils.APIError) {
	ret := _m.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for CreateAwsConnection")
	}

	var r0 *models.CreateAWSConnectionResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(*models.CreateAwsConnectionV1Request) (*models.CreateAWSConnectionResponse, *apiutils.APIError)); ok {
		return rf(body)
	}
	if rf, ok := ret.Get(0).(func(*models.CreateAwsConnectionV1Request) *models.CreateAWSConnectionResponse); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CreateAWSConnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.CreateAwsConnectionV1Request) *apiutils.APIError); ok {
		r1 = rf(body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockAWSConnectionClient_CreateAwsConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAwsConnection'
type MockAWSConnectionClient_CreateAwsConnection_Call struct {
	*mock.Call
}

// CreateAwsConnection is a helper method to define mock.On call
//   - body *models.CreateAwsConnectionV1Request
func (_e *MockAWSConnectionClient_Expecter) CreateAwsConnection(body interface{}) *MockAWSConnectionClient_CreateAwsConnection_Call {
	return &MockAWSConnectionClient_CreateAwsConnection_Call{Call: _e.mock.On("CreateAwsConnection", body)}
}

func (_c *MockAWSConnectionClient_CreateAwsConnection_Call) Run(run func(body *models.CreateAwsConnectionV1Request)) *MockAWSConnectionClient_CreateAwsConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.CreateAwsConnectionV1Request))
	})
	return _c
}

func (_c *MockAWSConnectionClient_CreateAwsConnection_Call) Return(_a0 *models.CreateAWSConnectionResponse, _a1 *apiutils.APIError) *MockAWSConnectionClient_CreateAwsConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAWSConnectionClient_CreateAwsConnection_Call) RunAndReturn(run func(*models.CreateAwsConnectionV1Request) (*models.CreateAWSConnectionResponse, *apiutils.APIError)) *MockAWSConnectionClient_CreateAwsConnection_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAwsConnection provides a mock function with given fields: connectionId
func (_m *MockAWSConnectionClient) DeleteAwsConnection(connectionId string) (interface{}, *apiutils.APIError) {
	ret := _m.Called(connectionId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAwsConnection")
	}

	var r0 interface{}
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string) (interface{}, *apiutils.APIError)); ok {
		return rf(connectionId)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(connectionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) *apiutils.APIError); ok {
		r1 = rf(connectionId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockAWSConnectionClient_DeleteAwsConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAwsConnection'
type MockAWSConnectionClient_DeleteAwsConnection_Call struct {
	*mock.Call
}

// DeleteAwsConnection is a helper method to define mock.On call
//   - connectionId string
func (_e *MockAWSConnectionClient_Expecter) DeleteAwsConnection(connectionId interface{}) *MockAWSConnectionClient_DeleteAwsConnection_Call {
	return &MockAWSConnectionClient_DeleteAwsConnection_Call{Call: _e.mock.On("DeleteAwsConnection", connectionId)}
}

func (_c *MockAWSConnectionClient_DeleteAwsConnection_Call) Run(run func(connectionId string)) *MockAWSConnectionClient_DeleteAwsConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAWSConnectionClient_DeleteAwsConnection_Call) Return(_a0 interface{}, _a1 *apiutils.APIError) *MockAWSConnectionClient_DeleteAwsConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAWSConnectionClient_DeleteAwsConnection_Call) RunAndReturn(run func(string) (interface{}, *apiutils.APIError)) *MockAWSConnectionClient_DeleteAwsConnection_Call {
	_c.Call.Return(run)
	return _c
}

// ListAwsConnections provides a mock function with given fields: limit, start, filter
func (_m *MockAWSConnectionClient) ListAwsConnections(limit *int64, start *string, filter *string) (*models.ListAWSConnectionsResponse, *apiutils.APIError) {
	ret := _m.Called(limit, start, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListAwsConnections")
	}

	var r0 *models.ListAWSConnectionsResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(*int64, *string, *string) (*models.ListAWSConnectionsResponse, *apiutils.APIError)); ok {
		return rf(limit, start, filter)
	}
	if rf, ok := ret.Get(0).(func(*int64, *string, *string) *models.ListAWSConnectionsResponse); ok {
		r0 = rf(limit, start, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ListAWSConnectionsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*int64, *string, *string) *apiutils.APIError); ok {
		r1 = rf(limit, start, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockAWSConnectionClient_ListAwsConnections_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAwsConnections'
type MockAWSConnectionClient_ListAwsConnections_Call struct {
	*mock.Call
}

// ListAwsConnections is a helper method to define mock.On call
//   - limit *int64
//   - start *string
//   - filter *string
func (_e *MockAWSConnectionClient_Expecter) ListAwsConnections(limit interface{}, start interface{}, filter interface{}) *MockAWSConnectionClient_ListAwsConnections_Call {
	return &MockAWSConnectionClient_ListAwsConnections_Call{Call: _e.mock.On("ListAwsConnections", limit, start, filter)}
}

func (_c *MockAWSConnectionClient_ListAwsConnections_Call) Run(run func(limit *int64, start *string, filter *string)) *MockAWSConnectionClient_ListAwsConnections_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*int64), args[1].(*string), args[2].(*string))
	})
	return _c
}

func (_c *MockAWSConnectionClient_ListAwsConnections_Call) Return(_a0 *models.ListAWSConnectionsResponse, _a1 *apiutils.APIError) *MockAWSConnectionClient_ListAwsConnections_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAWSConnectionClient_ListAwsConnections_Call) RunAndReturn(run func(*int64, *string, *string) (*models.ListAWSConnectionsResponse, *apiutils.APIError)) *MockAWSConnectionClient_ListAwsConnections_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAwsConnection provides a mock function with given fields: connectionId, returnExternalId
func (_m *MockAWSConnectionClient) ReadAwsConnection(connectionId string, returnExternalId *string) (*models.ReadAWSConnectionResponse, *apiutils.APIError) {
	ret := _m.Called(connectionId, returnExternalId)

	if len(ret) == 0 {
		panic("no return value specified for ReadAwsConnection")
	}

	var r0 *models.ReadAWSConnectionResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string, *string) (*models.ReadAWSConnectionResponse, *apiutils.APIError)); ok {
		return rf(connectionId, returnExternalId)
	}
	if rf, ok := ret.Get(0).(func(string, *string) *models.ReadAWSConnectionResponse); ok {
		r0 = rf(connectionId, returnExternalId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ReadAWSConnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *string) *apiutils.APIError); ok {
		r1 = rf(connectionId, returnExternalId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockAWSConnectionClient_ReadAwsConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAwsConnection'
type MockAWSConnectionClient_ReadAwsConnection_Call struct {
	*mock.Call
}

// ReadAwsConnection is a helper method to define mock.On call
//   - connectionId string
//   - returnExternalId *string
func (_e *MockAWSConnectionClient_Expecter) ReadAwsConnection(connectionId interface{}, returnExternalId interface{}) *MockAWSConnectionClient_ReadAwsConnection_Call {
	return &MockAWSConnectionClient_ReadAwsConnection_Call{Call: _e.mock.On("ReadAwsConnection", connectionId, returnExternalId)}
}

func (_c *MockAWSConnectionClient_ReadAwsConnection_Call) Run(run func(connectionId string, returnExternalId *string)) *MockAWSConnectionClient_ReadAwsConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*string))
	})
	return _c
}

func (_c *MockAWSConnectionClient_ReadAwsConnection_Call) Return(_a0 *models.ReadAWSConnectionResponse, _a1 *apiutils.APIError) *MockAWSConnectionClient_ReadAwsConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAWSConnectionClient_ReadAwsConnection_Call) RunAndReturn(run func(string, *string) (*models.ReadAWSConnectionResponse, *apiutils.APIError)) *MockAWSConnectionClient_ReadAwsConnection_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAwsConnection provides a mock function with given fields: connectionId, body
func (_m *MockAWSConnectionClient) UpdateAwsConnection(connectionId string, body models.UpdateAwsConnectionV1Request) (*models.UpdateAWSConnectionResponse, *apiutils.APIError) {
	ret := _m.Called(connectionId, body)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAwsConnection")
	}

	var r0 *models.UpdateAWSConnectionResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string, models.UpdateAwsConnectionV1Request) (*models.UpdateAWSConnectionResponse, *apiutils.APIError)); ok {
		return rf(connectionId, body)
	}
	if rf, ok := ret.Get(0).(func(string, models.UpdateAwsConnectionV1Request) *models.UpdateAWSConnectionResponse); ok {
		r0 = rf(connectionId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UpdateAWSConnectionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, models.UpdateAwsConnectionV1Request) *apiutils.APIError); ok {
		r1 = rf(connectionId, body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockAWSConnectionClient_UpdateAwsConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAwsConnection'
type MockAWSConnectionClient_UpdateAwsConnection_Call struct {
	*mock.Call
}

// UpdateAwsConnection is a helper method to define mock.On call
//   - connectionId string
//   - body models.UpdateAwsConnectionV1Request
func (_e *MockAWSConnectionClient_Expecter) UpdateAwsConnection(connectionId interface{}, body interface{}) *MockAWSConnectionClient_UpdateAwsConnection_Call {
	return &MockAWSConnectionClient_UpdateAwsConnection_Call{Call: _e.mock.On("UpdateAwsConnection", connectionId, body)}
}

func (_c *MockAWSConnectionClient_UpdateAwsConnection_Call) Run(run func(connectionId string, body models.UpdateAwsConnectionV1Request)) *MockAWSConnectionClient_UpdateAwsConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(models.UpdateAwsConnectionV1Request))
	})
	return _c
}

func (_c *MockAWSConnectionClient_UpdateAwsConnection_Call) Return(_a0 *models.UpdateAWSConnectionResponse, _a1 *apiutils.APIError) *MockAWSConnectionClient_UpdateAwsConnection_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAWSConnectionClient_UpdateAwsConnection_Call) RunAndReturn(run func(string, models.UpdateAwsConnectionV1Request) (*models.UpdateAWSConnectionResponse, *apiutils.APIError)) *MockAWSConnectionClient_UpdateAwsConnection_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAWSConnectionClient creates a new instance of MockAWSConnectionClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAWSConnectionClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAWSConnectionClient {
	mock := &MockAWSConnectionClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
