// Code generated by mockery. DO NOT EDIT.

package sdkclients

import (
	apiutils "github.com/clumio-code/clumio-go-sdk/api_utils"
	mock "github.com/stretchr/testify/mock"

	models "github.com/clumio-code/clumio-go-sdk/models"
)

// MockPolicyDefinitionClient is an autogenerated mock type for the PolicyDefinitionClient type
type MockPolicyDefinitionClient struct {
	mock.Mock
}

type MockPolicyDefinitionClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPolicyDefinitionClient) EXPECT() *MockPolicyDefinitionClient_Expecter {
	return &MockPolicyDefinitionClient_Expecter{mock: &_m.Mock}
}

// CreatePolicyDefinition provides a mock function with given fields: body
func (_m *MockPolicyDefinitionClient) CreatePolicyDefinition(body *models.CreatePolicyDefinitionV1Request) (*models.CreatePolicyResponse, *apiutils.APIError) {
	ret := _m.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolicyDefinition")
	}

	var r0 *models.CreatePolicyResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(*models.CreatePolicyDefinitionV1Request) (*models.CreatePolicyResponse, *apiutils.APIError)); ok {
		return rf(body)
	}
	if rf, ok := ret.Get(0).(func(*models.CreatePolicyDefinitionV1Request) *models.CreatePolicyResponse); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CreatePolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.CreatePolicyDefinitionV1Request) *apiutils.APIError); ok {
		r1 = rf(body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockPolicyDefinitionClient_CreatePolicyDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePolicyDefinition'
type MockPolicyDefinitionClient_CreatePolicyDefinition_Call struct {
	*mock.Call
}

// CreatePolicyDefinition is a helper method to define mock.On call
//   - body *models.CreatePolicyDefinitionV1Request
func (_e *MockPolicyDefinitionClient_Expecter) CreatePolicyDefinition(body interface{}) *MockPolicyDefinitionClient_CreatePolicyDefinition_Call {
	return &MockPolicyDefinitionClient_CreatePolicyDefinition_Call{Call: _e.mock.On("CreatePolicyDefinition", body)}
}

func (_c *MockPolicyDefinitionClient_CreatePolicyDefinition_Call) Run(run func(body *models.CreatePolicyDefinitionV1Request)) *MockPolicyDefinitionClient_CreatePolicyDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.CreatePolicyDefinitionV1Request))
	})
	return _c
}

func (_c *MockPolicyDefinitionClient_CreatePolicyDefinition_Call) Return(_a0 *models.CreatePolicyResponse, _a1 *apiutils.APIError) *MockPolicyDefinitionClient_CreatePolicyDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPolicyDefinitionClient_CreatePolicyDefinition_Call) RunAndReturn(run func(*models.CreatePolicyDefinitionV1Request) (*models.CreatePolicyResponse, *apiutils.APIError)) *MockPolicyDefinitionClient_CreatePolicyDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// DeletePolicyDefinition provides a mock function with given fields: policyId
func (_m *MockPolicyDefinitionClient) DeletePolicyDefinition(policyId string) (*models.DeletePolicyResponse, *apiutils.APIError) {
	ret := _m.Called(policyId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicyDefinition")
	}

	var r0 *models.DeletePolicyResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string) (*models.DeletePolicyResponse, *apiutils.APIError)); ok {
		return rf(policyId)
	}
	if rf, ok := ret.Get(0).(func(string) *models.DeletePolicyResponse); ok {
		r0 = rf(policyId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.DeletePolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *apiutils.APIError); ok {
		r1 = rf(policyId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockPolicyDefinitionClient_DeletePolicyDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePolicyDefinition'
type MockPolicyDefinitionClient_DeletePolicyDefinition_Call struct {
	*mock.Call
}

// DeletePolicyDefinition is a helper method to define mock.On call
//   - policyId string
func (_e *MockPolicyDefinitionClient_Expecter) DeletePolicyDefinition(policyId interface{}) *MockPolicyDefinitionClient_DeletePolicyDefinition_Call {
	return &MockPolicyDefinitionClient_DeletePolicyDefinition_Call{Call: _e.mock.On("DeletePolicyDefinition", policyId)}
}

func (_c *MockPolicyDefinitionClient_DeletePolicyDefinition_Call) Run(run func(policyId string)) *MockPolicyDefinitionClient_DeletePolicyDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockPolicyDefinitionClient_DeletePolicyDefinition_Call) Return(_a0 *models.DeletePolicyResponse, _a1 *apiutils.APIError) *MockPolicyDefinitionClient_DeletePolicyDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPolicyDefinitionClient_DeletePolicyDefinition_Call) RunAndReturn(run func(string) (*models.DeletePolicyResponse, *apiutils.APIError)) *MockPolicyDefinitionClient_DeletePolicyDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// ListPolicyDefinitions provides a mock function with given fields: filter, embed
func (_m *MockPolicyDefinitionClient) ListPolicyDefinitions(filter *string, embed *string) (*models.ListPoliciesResponse, *apiutils.APIError) {
	ret := _m.Called(filter, embed)

	if len(ret) == 0 {
		panic("no return value specified for ListPolicyDefinitions")
	}

	var r0 *models.ListPoliciesResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(*string, *string) (*models.ListPoliciesResponse, *apiutils.APIError)); ok {
		return rf(filter, embed)
	}
	if rf, ok := ret.Get(0).(func(*string, *string) *models.ListPoliciesResponse); ok {
		r0 = rf(filter, embed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ListPoliciesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*string, *string) *apiutils.APIError); ok {
		r1 = rf(filter, embed)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockPolicyDefinitionClient_ListPolicyDefinitions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPolicyDefinitions'
type MockPolicyDefinitionClient_ListPolicyDefinitions_Call struct {
	*mock.Call
}

// ListPolicyDefinitions is a helper method to define mock.On call
//   - filter *string
//   - embed *string
func (_e *MockPolicyDefinitionClient_Expecter) ListPolicyDefinitions(filter interface{}, embed interface{}) *MockPolicyDefinitionClient_ListPolicyDefinitions_Call {
	return &MockPolicyDefinitionClient_ListPolicyDefinitions_Call{Call: _e.mock.On("ListPolicyDefinitions", filter, embed)}
}

func (_c *MockPolicyDefinitionClient_ListPolicyDefinitions_Call) Run(run func(filter *string, embed *string)) *MockPolicyDefinitionClient_ListPolicyDefinitions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*string), args[1].(*string))
	})
	return _c
}

func (_c *MockPolicyDefinitionClient_ListPolicyDefinitions_Call) Return(_a0 *models.ListPoliciesResponse, _a1 *apiutils.APIError) *MockPolicyDefinitionClient_ListPolicyDefinitions_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPolicyDefinitionClient_ListPolicyDefinitions_Call) RunAndReturn(run func(*string, *string) (*models.ListPoliciesResponse, *apiutils.APIError)) *MockPolicyDefinitionClient_ListPolicyDefinitions_Call {
	_c.Call.Return(run)
	return _c
}

// ReadPolicyDefinition provides a mock function with given fields: policyId, embed
func (_m *MockPolicyDefinitionClient) ReadPolicyDefinition(policyId string, embed *string) (*models.ReadPolicyResponse, *apiutils.APIError) {
	ret := _m.Called(policyId, embed)

	if len(ret) == 0 {
		panic("no return value specified for ReadPolicyDefinition")
	}

	var r0 *models.ReadPolicyResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string, *string) (*models.ReadPolicyResponse, *apiutils.APIError)); ok {
		return rf(policyId, embed)
	}
	if rf, ok := ret.Get(0).(func(string, *string) *models.ReadPolicyResponse); ok {
		r0 = rf(policyId, embed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ReadPolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *string) *apiutils.APIError); ok {
		r1 = rf(policyId, embed)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockPolicyDefinitionClient_ReadPolicyDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadPolicyDefinition'
type MockPolicyDefinitionClient_ReadPolicyDefinition_Call struct {
	*mock.Call
}

// ReadPolicyDefinition is a helper method to define mock.On call
//   - policyId string
//   - embed *string
func (_e *MockPolicyDefinitionClient_Expecter) ReadPolicyDefinition(policyId interface{}, embed interface{}) *MockPolicyDefinitionClient_ReadPolicyDefinition_Call {
	return &MockPolicyDefinitionClient_ReadPolicyDefinition_Call{Call: _e.mock.On("ReadPolicyDefinition", policyId, embed)}
}

func (_c *MockPolicyDefinitionClient_ReadPolicyDefinition_Call) Run(run func(policyId string, embed *string)) *MockPolicyDefinitionClient_ReadPolicyDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*string))
	})
	return _c
}

func (_c *MockPolicyDefinitionClient_ReadPolicyDefinition_Call) Return(_a0 *models.ReadPolicyResponse, _a1 *apiutils.APIError) *MockPolicyDefinitionClient_ReadPolicyDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPolicyDefinitionClient_ReadPolicyDefinition_Call) RunAndReturn(run func(string, *string) (*models.ReadPolicyResponse, *apiutils.APIError)) *MockPolicyDefinitionClient_ReadPolicyDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePolicyDefinition provides a mock function with given fields: policyId, embed, body
func (_m *MockPolicyDefinitionClient) UpdatePolicyDefinition(policyId string, embed *string, body *models.UpdatePolicyDefinitionV1Request) (*models.UpdatePolicyResponse, *apiutils.APIError) {
	ret := _m.Called(policyId, embed, body)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePolicyDefinition")
	}

	var r0 *models.UpdatePolicyResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string, *string, *models.UpdatePolicyDefinitionV1Request) (*models.UpdatePolicyResponse, *apiutils.APIError)); ok {
		return rf(policyId, embed, body)
	}
	if rf, ok := ret.Get(0).(func(string, *string, *models.UpdatePolicyDefinitionV1Request) *models.UpdatePolicyResponse); ok {
		r0 = rf(policyId, embed, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UpdatePolicyResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *string, *models.UpdatePolicyDefinitionV1Request) *apiutils.APIError); ok {
		r1 = rf(policyId, embed, body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockPolicyDefinitionClient_UpdatePolicyDefinition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePolicyDefinition'
type MockPolicyDefinitionClient_UpdatePolicyDefinition_Call struct {
	*mock.Call
}

// UpdatePolicyDefinition is a helper method to define mock.On call
//   - policyId string
//   - embed *string
//   - body *models.UpdatePolicyDefinitionV1Request
func (_e *MockPolicyDefinitionClient_Expecter) UpdatePolicyDefinition(policyId interface{}, embed interface{}, body interface{}) *MockPolicyDefinitionClient_UpdatePolicyDefinition_Call {
	return &MockPolicyDefinitionClient_UpdatePolicyDefinition_Call{Call: _e.mock.On("UpdatePolicyDefinition", policyId, embed, body)}
}

func (_c *MockPolicyDefinitionClient_UpdatePolicyDefinition_Call) Run(run func(policyId string, embed *string, body *models.UpdatePolicyDefinitionV1Request)) *MockPolicyDefinitionClient_UpdatePolicyDefinition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*string), args[2].(*models.UpdatePolicyDefinitionV1Request))
	})
	return _c
}

func (_c *MockPolicyDefinitionClient_UpdatePolicyDefinition_Call) Return(_a0 *models.UpdatePolicyResponse, _a1 *apiutils.APIError) *MockPolicyDefinitionClient_UpdatePolicyDefinition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPolicyDefinitionClient_UpdatePolicyDefinition_Call) RunAndReturn(run func(string, *string, *models.UpdatePolicyDefinitionV1Request) (*models.UpdatePolicyResponse, *apiutils.APIError)) *MockPolicyDefinitionClient_UpdatePolicyDefinition_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPolicyDefinitionClient creates a new instance of MockPolicyDefinitionClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPolicyDefinitionClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPolicyDefinitionClient {
	mock := &MockPolicyDefinitionClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
