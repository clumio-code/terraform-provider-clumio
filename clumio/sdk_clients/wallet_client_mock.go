// Code generated by mockery. DO NOT EDIT.

package sdkclients

import (
	apiutils "github.com/clumio-code/clumio-go-sdk/api_utils"
	mock "github.com/stretchr/testify/mock"

	models "github.com/clumio-code/clumio-go-sdk/models"
)

// MockWalletClient is an autogenerated mock type for the WalletClient type
type MockWalletClient struct {
	mock.Mock
}

type MockWalletClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWalletClient) EXPECT() *MockWalletClient_Expecter {
	return &MockWalletClient_Expecter{mock: &_m.Mock}
}

// CreateWallet provides a mock function with given fields: body
func (_m *MockWalletClient) CreateWallet(body *models.CreateWalletV1Request) (*models.CreateWalletResponse, *apiutils.APIError) {
	ret := _m.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for CreateWallet")
	}

	var r0 *models.CreateWalletResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(*models.CreateWalletV1Request) (*models.CreateWalletResponse, *apiutils.APIError)); ok {
		return rf(body)
	}
	if rf, ok := ret.Get(0).(func(*models.CreateWalletV1Request) *models.CreateWalletResponse); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CreateWalletResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.CreateWalletV1Request) *apiutils.APIError); ok {
		r1 = rf(body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockWalletClient_CreateWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateWallet'
type MockWalletClient_CreateWallet_Call struct {
	*mock.Call
}

// CreateWallet is a helper method to define mock.On call
//   - body *models.CreateWalletV1Request
func (_e *MockWalletClient_Expecter) CreateWallet(body interface{}) *MockWalletClient_CreateWallet_Call {
	return &MockWalletClient_CreateWallet_Call{Call: _e.mock.On("CreateWallet", body)}
}

func (_c *MockWalletClient_CreateWallet_Call) Run(run func(body *models.CreateWalletV1Request)) *MockWalletClient_CreateWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.CreateWalletV1Request))
	})
	return _c
}

func (_c *MockWalletClient_CreateWallet_Call) Return(_a0 *models.CreateWalletResponse, _a1 *apiutils.APIError) *MockWalletClient_CreateWallet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWalletClient_CreateWallet_Call) RunAndReturn(run func(*models.CreateWalletV1Request) (*models.CreateWalletResponse, *apiutils.APIError)) *MockWalletClient_CreateWallet_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteWallet provides a mock function with given fields: walletId
func (_m *MockWalletClient) DeleteWallet(walletId string) (interface{}, *apiutils.APIError) {
	ret := _m.Called(walletId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWallet")
	}

	var r0 interface{}
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string) (interface{}, *apiutils.APIError)); ok {
		return rf(walletId)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(walletId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) *apiutils.APIError); ok {
		r1 = rf(walletId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockWalletClient_DeleteWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteWallet'
type MockWalletClient_DeleteWallet_Call struct {
	*mock.Call
}

// DeleteWallet is a helper method to define mock.On call
//   - walletId string
func (_e *MockWalletClient_Expecter) DeleteWallet(walletId interface{}) *MockWalletClient_DeleteWallet_Call {
	return &MockWalletClient_DeleteWallet_Call{Call: _e.mock.On("DeleteWallet", walletId)}
}

func (_c *MockWalletClient_DeleteWallet_Call) Run(run func(walletId string)) *MockWalletClient_DeleteWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWalletClient_DeleteWallet_Call) Return(_a0 interface{}, _a1 *apiutils.APIError) *MockWalletClient_DeleteWallet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWalletClient_DeleteWallet_Call) RunAndReturn(run func(string) (interface{}, *apiutils.APIError)) *MockWalletClient_DeleteWallet_Call {
	_c.Call.Return(run)
	return _c
}

// ListWallets provides a mock function with given fields: limit, start
func (_m *MockWalletClient) ListWallets(limit *int64, start *string) (*models.ListWalletsResponse, *apiutils.APIError) {
	ret := _m.Called(limit, start)

	if len(ret) == 0 {
		panic("no return value specified for ListWallets")
	}

	var r0 *models.ListWalletsResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(*int64, *string) (*models.ListWalletsResponse, *apiutils.APIError)); ok {
		return rf(limit, start)
	}
	if rf, ok := ret.Get(0).(func(*int64, *string) *models.ListWalletsResponse); ok {
		r0 = rf(limit, start)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ListWalletsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*int64, *string) *apiutils.APIError); ok {
		r1 = rf(limit, start)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockWalletClient_ListWallets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListWallets'
type MockWalletClient_ListWallets_Call struct {
	*mock.Call
}

// ListWallets is a helper method to define mock.On call
//   - limit *int64
//   - start *string
func (_e *MockWalletClient_Expecter) ListWallets(limit interface{}, start interface{}) *MockWalletClient_ListWallets_Call {
	return &MockWalletClient_ListWallets_Call{Call: _e.mock.On("ListWallets", limit, start)}
}

func (_c *MockWalletClient_ListWallets_Call) Run(run func(limit *int64, start *string)) *MockWalletClient_ListWallets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*int64), args[1].(*string))
	})
	return _c
}

func (_c *MockWalletClient_ListWallets_Call) Return(_a0 *models.ListWalletsResponse, _a1 *apiutils.APIError) *MockWalletClient_ListWallets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWalletClient_ListWallets_Call) RunAndReturn(run func(*int64, *string) (*models.ListWalletsResponse, *apiutils.APIError)) *MockWalletClient_ListWallets_Call {
	_c.Call.Return(run)
	return _c
}

// ReadWallet provides a mock function with given fields: walletId
func (_m *MockWalletClient) ReadWallet(walletId string) (*models.ReadWalletResponse, *apiutils.APIError) {
	ret := _m.Called(walletId)

	if len(ret) == 0 {
		panic("no return value specified for ReadWallet")
	}

	var r0 *models.ReadWalletResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string) (*models.ReadWalletResponse, *apiutils.APIError)); ok {
		return rf(walletId)
	}
	if rf, ok := ret.Get(0).(func(string) *models.ReadWalletResponse); ok {
		r0 = rf(walletId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ReadWalletResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *apiutils.APIError); ok {
		r1 = rf(walletId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockWalletClient_ReadWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadWallet'
type MockWalletClient_ReadWallet_Call struct {
	*mock.Call
}

// ReadWallet is a helper method to define mock.On call
//   - walletId string
func (_e *MockWalletClient_Expecter) ReadWallet(walletId interface{}) *MockWalletClient_ReadWallet_Call {
	return &MockWalletClient_ReadWallet_Call{Call: _e.mock.On("ReadWallet", walletId)}
}

func (_c *MockWalletClient_ReadWallet_Call) Run(run func(walletId string)) *MockWalletClient_ReadWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWalletClient_ReadWallet_Call) Return(_a0 *models.ReadWalletResponse, _a1 *apiutils.APIError) *MockWalletClient_ReadWallet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWalletClient_ReadWallet_Call) RunAndReturn(run func(string) (*models.ReadWalletResponse, *apiutils.APIError)) *MockWalletClient_ReadWallet_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshWallet provides a mock function with given fields: walletId
func (_m *MockWalletClient) RefreshWallet(walletId string) (*models.RefreshWalletResponse, *apiutils.APIError) {
	ret := _m.Called(walletId)

	if len(ret) == 0 {
		panic("no return value specified for RefreshWallet")
	}

	var r0 *models.RefreshWalletResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string) (*models.RefreshWalletResponse, *apiutils.APIError)); ok {
		return rf(walletId)
	}
	if rf, ok := ret.Get(0).(func(string) *models.RefreshWalletResponse); ok {
		r0 = rf(walletId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RefreshWalletResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *apiutils.APIError); ok {
		r1 = rf(walletId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockWalletClient_RefreshWallet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshWallet'
type MockWalletClient_RefreshWallet_Call struct {
	*mock.Call
}

// RefreshWallet is a helper method to define mock.On call
//   - walletId string
func (_e *MockWalletClient_Expecter) RefreshWallet(walletId interface{}) *MockWalletClient_RefreshWallet_Call {
	return &MockWalletClient_RefreshWallet_Call{Call: _e.mock.On("RefreshWallet", walletId)}
}

func (_c *MockWalletClient_RefreshWallet_Call) Run(run func(walletId string)) *MockWalletClient_RefreshWallet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWalletClient_RefreshWallet_Call) Return(_a0 *models.RefreshWalletResponse, _a1 *apiutils.APIError) *MockWalletClient_RefreshWallet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWalletClient_RefreshWallet_Call) RunAndReturn(run func(string) (*models.RefreshWalletResponse, *apiutils.APIError)) *MockWalletClient_RefreshWallet_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWalletClient creates a new instance of MockWalletClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWalletClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWalletClient {
	mock := &MockWalletClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
