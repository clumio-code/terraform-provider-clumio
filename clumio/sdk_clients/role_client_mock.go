// Code generated by mockery. DO NOT EDIT.

package sdkclients

import (
	apiutils "github.com/clumio-code/clumio-go-sdk/api_utils"
	mock "github.com/stretchr/testify/mock"

	models "github.com/clumio-code/clumio-go-sdk/models"
)

// MockRoleClient is an autogenerated mock type for the RoleClient type
type MockRoleClient struct {
	mock.Mock
}

type MockRoleClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRoleClient) EXPECT() *MockRoleClient_Expecter {
	return &MockRoleClient_Expecter{mock: &_m.Mock}
}

// ListRoles provides a mock function with given fields:
func (_m *MockRoleClient) ListRoles() (*models.ListRolesResponse, *apiutils.APIError) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListRoles")
	}

	var r0 *models.ListRolesResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func() (*models.ListRolesResponse, *apiutils.APIError)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *models.ListRolesResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ListRolesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() *apiutils.APIError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockRoleClient_ListRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListRoles'
type MockRoleClient_ListRoles_Call struct {
	*mock.Call
}

// ListRoles is a helper method to define mock.On call
func (_e *MockRoleClient_Expecter) ListRoles() *MockRoleClient_ListRoles_Call {
	return &MockRoleClient_ListRoles_Call{Call: _e.mock.On("ListRoles")}
}

func (_c *MockRoleClient_ListRoles_Call) Run(run func()) *MockRoleClient_ListRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockRoleClient_ListRoles_Call) Return(_a0 *models.ListRolesResponse, _a1 *apiutils.APIError) *MockRoleClient_ListRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRoleClient_ListRoles_Call) RunAndReturn(run func() (*models.ListRolesResponse, *apiutils.APIError)) *MockRoleClient_ListRoles_Call {
	_c.Call.Return(run)
	return _c
}

// ReadRole provides a mock function with given fields: roleId
func (_m *MockRoleClient) ReadRole(roleId string) (*models.ReadRoleResponse, *apiutils.APIError) {
	ret := _m.Called(roleId)

	if len(ret) == 0 {
		panic("no return value specified for ReadRole")
	}

	var r0 *models.ReadRoleResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string) (*models.ReadRoleResponse, *apiutils.APIError)); ok {
		return rf(roleId)
	}
	if rf, ok := ret.Get(0).(func(string) *models.ReadRoleResponse); ok {
		r0 = rf(roleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ReadRoleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *apiutils.APIError); ok {
		r1 = rf(roleId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockRoleClient_ReadRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadRole'
type MockRoleClient_ReadRole_Call struct {
	*mock.Call
}

// ReadRole is a helper method to define mock.On call
//   - roleId string
func (_e *MockRoleClient_Expecter) ReadRole(roleId interface{}) *MockRoleClient_ReadRole_Call {
	return &MockRoleClient_ReadRole_Call{Call: _e.mock.On("ReadRole", roleId)}
}

func (_c *MockRoleClient_ReadRole_Call) Run(run func(roleId string)) *MockRoleClient_ReadRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockRoleClient_ReadRole_Call) Return(_a0 *models.ReadRoleResponse, _a1 *apiutils.APIError) *MockRoleClient_ReadRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRoleClient_ReadRole_Call) RunAndReturn(run func(string) (*models.ReadRoleResponse, *apiutils.APIError)) *MockRoleClient_ReadRole_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRoleClient creates a new instance of MockRoleClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRoleClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRoleClient {
	mock := &MockRoleClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
