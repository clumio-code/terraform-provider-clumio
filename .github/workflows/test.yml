# This GitHub action runs your tests for each commit push and/or PR.
#
name: Tests
on:
  pull_request:
    branches: [ '**' ]
  push:
    branches: [ 'main', 'release/**' ]
  workflow_dispatch:
    # Allows us to trigger this action manually.
env:
  # This activates boringcrypto which provides FIPS compliant crypto libraries.
  GOEXPERIMENT: boringcrypto
  # Prevent Go from downloading other versions from the Internet.
  GOTOOLCHAIN: local
  ENABLE_TEST_REPORTS: false
  # This should be the latest 2 major releases of Go, older versions are
  # not maintained and lack security updates.
  GO_LATEST: 1.24
  GO_PREVIOUS: 1.23

jobs:
  # This prepare stage allows us to export and re-use information
  # under the matrix strategy where `env.` resolution does not work.
  prepare:
    runs-on: ubuntu-latest
    outputs:
      go_versions: ${{ steps.go_versions.outputs.go_versions }}
      go_latest: ${{ env.GO_LATEST }}
    steps:
      - name: Select Go versions
        id: go_versions
        run: echo "go_versions=['$GO_LATEST','$GO_PREVIOUS']" | tee -a "$GITHUB_OUTPUT"

  build-and-test:
    name: Build
    needs: prepare
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        go: ${{ fromJson(needs.prepare.outputs.go_versions) }}
        # Use a dynamic matrix to allow testing multiple OSes and Go versions
        # in the public repository but reduce combinations in private clones.
        exclude:
          - os: ${{ github.repository_owner == 'clumio-code' && '_' || 'macos-latest' }}
          - os: ${{ github.repository_owner == 'clumio-code' && '_' || 'windows-latest' }}
          # - go: ${{ github.repository_owner == 'clumio-code' && '_' || needs.prepare.outputs.go_latest }}

    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4

    - name: Extend environment for test reports
      # When updating the Go versions in the excluded matrix, update the condition below.
      if: github.repository_owner == 'clumio' && matrix.os == 'ubuntu-latest' && matrix.go == env.GO_PREVIOUS
      run: |
        echo "ENABLE_TEST_REPORTS=true" >> $GITHUB_ENV
        echo "REPOSITORY_NAME=$(cut -d/ -f2 <<< ${GITHUB_REPOSITORY})" >> $GITHUB_ENV
        if [[ ! $GITHUB_BASE_REF ]]; then
          # GITHUB_BASE_REF is only set for PRs, we are on a branch.
          echo "SONAR_BRANCH=${GITHUB_REF_NAME}" >> $GITHUB_ENV
        fi

    - name: Show Environment
      shell: bash
      run: |
        echo "pwd: $(pwd)"
        echo "matrix.os=${{ matrix.os }}"
        echo "matrix.go=${{ matrix.go }}"
        echo "github.repository_owner=${{ github.repository_owner }}"
        echo "ENABLE_TEST_REPORTS=${ENABLE_TEST_REPORTS}"
        echo "SONAR_BRANCH=${SONAR_BRANCH}"

    - name: Get dependencies
      run: go mod download

    - name: Vet
      run: go vet ./...
      timeout-minutes: 3

    - name: Build
      run: go build -v .
      timeout-minutes: 1

    - name: Setup gotestsum
      # Note that `v2.0.0` is required, there is no `v2` tag for this action.
      uses: autero1/action-gotestsum@v2.0.0
      with:
        gotestsum_version: 1.12.1
        # https://github.com/gotestyourself/gotestsum/releases

    - name: Unit Tests
      timeout-minutes: 5
      shell: bash
      run: |
        if [[ ${ENABLE_TEST_REPORTS} == 'true' ]]; then
          # Delay failing the pipeline to allow the SonarCloud Scan to run.
          make testcover || echo "TEST_FAILURE=true" >> $GITHUB_ENV
          if [[ -e .git/shallow ]]; then
            echo Unshallow the git clone to provide blame information to SonarCloud.
            git fetch --unshallow
          fi
        else
          make testunit
        fi

#    - name: TF Acceptance Tests
      # https://developer.hashicorp.com/terraform/plugin/testing/acceptance-tests

    - name: SonarCloud Scan
      if: ${{ env.ENABLE_TEST_REPORTS == 'true' }}
      uses: SonarSource/sonarcloud-github-action@v5
      timeout-minutes: 5
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_ORGANIZATION: ${{ github.repository_owner }}
        SONAR_PROJECT_KEY: "${{ github.repository_owner }}_${{ env.REPOSITORY_NAME }}"
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        TEST_REPORTS_DIR: 'build/reports'

    - name: Check Unit Tests failure
      if: ${{ env.TEST_FAILURE == 'true' }}
      run: echo "Tests failed during the Unit Test step."; exit 1
