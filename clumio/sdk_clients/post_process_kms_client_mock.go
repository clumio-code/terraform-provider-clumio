// Code generated by mockery. DO NOT EDIT.

package sdkclients

import (
	apiutils "github.com/clumio-code/clumio-go-sdk/api_utils"
	mock "github.com/stretchr/testify/mock"

	models "github.com/clumio-code/clumio-go-sdk/models"
)

// MockPostProcessKMSClient is an autogenerated mock type for the PostProcessKMSClient type
type MockPostProcessKMSClient struct {
	mock.Mock
}

type MockPostProcessKMSClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostProcessKMSClient) EXPECT() *MockPostProcessKMSClient_Expecter {
	return &MockPostProcessKMSClient_Expecter{mock: &_m.Mock}
}

// PostProcessKms provides a mock function with given fields: body
func (_m *MockPostProcessKMSClient) PostProcessKms(body *models.PostProcessKmsV1Request) (interface{}, *apiutils.APIError) {
	ret := _m.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for PostProcessKms")
	}

	var r0 interface{}
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(*models.PostProcessKmsV1Request) (interface{}, *apiutils.APIError)); ok {
		return rf(body)
	}
	if rf, ok := ret.Get(0).(func(*models.PostProcessKmsV1Request) interface{}); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*models.PostProcessKmsV1Request) *apiutils.APIError); ok {
		r1 = rf(body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockPostProcessKMSClient_PostProcessKms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostProcessKms'
type MockPostProcessKMSClient_PostProcessKms_Call struct {
	*mock.Call
}

// PostProcessKms is a helper method to define mock.On call
//   - body *models.PostProcessKmsV1Request
func (_e *MockPostProcessKMSClient_Expecter) PostProcessKms(body interface{}) *MockPostProcessKMSClient_PostProcessKms_Call {
	return &MockPostProcessKMSClient_PostProcessKms_Call{Call: _e.mock.On("PostProcessKms", body)}
}

func (_c *MockPostProcessKMSClient_PostProcessKms_Call) Run(run func(body *models.PostProcessKmsV1Request)) *MockPostProcessKMSClient_PostProcessKms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.PostProcessKmsV1Request))
	})
	return _c
}

func (_c *MockPostProcessKMSClient_PostProcessKms_Call) Return(_a0 interface{}, _a1 *apiutils.APIError) *MockPostProcessKMSClient_PostProcessKms_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPostProcessKMSClient_PostProcessKms_Call) RunAndReturn(run func(*models.PostProcessKmsV1Request) (interface{}, *apiutils.APIError)) *MockPostProcessKMSClient_PostProcessKms_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostProcessKMSClient creates a new instance of MockPostProcessKMSClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostProcessKMSClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostProcessKMSClient {
	mock := &MockPostProcessKMSClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
