// Code generated by mockery. DO NOT EDIT.

package sdkclients

import (
	apiutils "github.com/clumio-code/clumio-go-sdk/api_utils"
	mock "github.com/stretchr/testify/mock"

	models "github.com/clumio-code/clumio-go-sdk/models"
)

// MockAutoUserProvisioningRuleClient is an autogenerated mock type for the AutoUserProvisioningRuleClient type
type MockAutoUserProvisioningRuleClient struct {
	mock.Mock
}

type MockAutoUserProvisioningRuleClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAutoUserProvisioningRuleClient) EXPECT() *MockAutoUserProvisioningRuleClient_Expecter {
	return &MockAutoUserProvisioningRuleClient_Expecter{mock: &_m.Mock}
}

// CreateAutoUserProvisioningRule provides a mock function with given fields: body
func (_m *MockAutoUserProvisioningRuleClient) CreateAutoUserProvisioningRule(body *models.CreateAutoUserProvisioningRuleV1Request) (*models.CreateAutoUserProvisioningRuleResponse, *apiutils.APIError) {
	ret := _m.Called(body)

	if len(ret) == 0 {
		panic("no return value specified for CreateAutoUserProvisioningRule")
	}

	var r0 *models.CreateAutoUserProvisioningRuleResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(*models.CreateAutoUserProvisioningRuleV1Request) (*models.CreateAutoUserProvisioningRuleResponse, *apiutils.APIError)); ok {
		return rf(body)
	}
	if rf, ok := ret.Get(0).(func(*models.CreateAutoUserProvisioningRuleV1Request) *models.CreateAutoUserProvisioningRuleResponse); ok {
		r0 = rf(body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CreateAutoUserProvisioningRuleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.CreateAutoUserProvisioningRuleV1Request) *apiutils.APIError); ok {
		r1 = rf(body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockAutoUserProvisioningRuleClient_CreateAutoUserProvisioningRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAutoUserProvisioningRule'
type MockAutoUserProvisioningRuleClient_CreateAutoUserProvisioningRule_Call struct {
	*mock.Call
}

// CreateAutoUserProvisioningRule is a helper method to define mock.On call
//   - body *models.CreateAutoUserProvisioningRuleV1Request
func (_e *MockAutoUserProvisioningRuleClient_Expecter) CreateAutoUserProvisioningRule(body interface{}) *MockAutoUserProvisioningRuleClient_CreateAutoUserProvisioningRule_Call {
	return &MockAutoUserProvisioningRuleClient_CreateAutoUserProvisioningRule_Call{Call: _e.mock.On("CreateAutoUserProvisioningRule", body)}
}

func (_c *MockAutoUserProvisioningRuleClient_CreateAutoUserProvisioningRule_Call) Run(run func(body *models.CreateAutoUserProvisioningRuleV1Request)) *MockAutoUserProvisioningRuleClient_CreateAutoUserProvisioningRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.CreateAutoUserProvisioningRuleV1Request))
	})
	return _c
}

func (_c *MockAutoUserProvisioningRuleClient_CreateAutoUserProvisioningRule_Call) Return(_a0 *models.CreateAutoUserProvisioningRuleResponse, _a1 *apiutils.APIError) *MockAutoUserProvisioningRuleClient_CreateAutoUserProvisioningRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAutoUserProvisioningRuleClient_CreateAutoUserProvisioningRule_Call) RunAndReturn(run func(*models.CreateAutoUserProvisioningRuleV1Request) (*models.CreateAutoUserProvisioningRuleResponse, *apiutils.APIError)) *MockAutoUserProvisioningRuleClient_CreateAutoUserProvisioningRule_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteAutoUserProvisioningRule provides a mock function with given fields: ruleId
func (_m *MockAutoUserProvisioningRuleClient) DeleteAutoUserProvisioningRule(ruleId string) (interface{}, *apiutils.APIError) {
	ret := _m.Called(ruleId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAutoUserProvisioningRule")
	}

	var r0 interface{}
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string) (interface{}, *apiutils.APIError)); ok {
		return rf(ruleId)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(ruleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) *apiutils.APIError); ok {
		r1 = rf(ruleId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockAutoUserProvisioningRuleClient_DeleteAutoUserProvisioningRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAutoUserProvisioningRule'
type MockAutoUserProvisioningRuleClient_DeleteAutoUserProvisioningRule_Call struct {
	*mock.Call
}

// DeleteAutoUserProvisioningRule is a helper method to define mock.On call
//   - ruleId string
func (_e *MockAutoUserProvisioningRuleClient_Expecter) DeleteAutoUserProvisioningRule(ruleId interface{}) *MockAutoUserProvisioningRuleClient_DeleteAutoUserProvisioningRule_Call {
	return &MockAutoUserProvisioningRuleClient_DeleteAutoUserProvisioningRule_Call{Call: _e.mock.On("DeleteAutoUserProvisioningRule", ruleId)}
}

func (_c *MockAutoUserProvisioningRuleClient_DeleteAutoUserProvisioningRule_Call) Run(run func(ruleId string)) *MockAutoUserProvisioningRuleClient_DeleteAutoUserProvisioningRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAutoUserProvisioningRuleClient_DeleteAutoUserProvisioningRule_Call) Return(_a0 interface{}, _a1 *apiutils.APIError) *MockAutoUserProvisioningRuleClient_DeleteAutoUserProvisioningRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAutoUserProvisioningRuleClient_DeleteAutoUserProvisioningRule_Call) RunAndReturn(run func(string) (interface{}, *apiutils.APIError)) *MockAutoUserProvisioningRuleClient_DeleteAutoUserProvisioningRule_Call {
	_c.Call.Return(run)
	return _c
}

// ListAutoUserProvisioningRules provides a mock function with given fields: limit, start, filter
func (_m *MockAutoUserProvisioningRuleClient) ListAutoUserProvisioningRules(limit *int64, start *string, filter *string) (*models.ListAutoUserProvisioningRulesResponse, *apiutils.APIError) {
	ret := _m.Called(limit, start, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListAutoUserProvisioningRules")
	}

	var r0 *models.ListAutoUserProvisioningRulesResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(*int64, *string, *string) (*models.ListAutoUserProvisioningRulesResponse, *apiutils.APIError)); ok {
		return rf(limit, start, filter)
	}
	if rf, ok := ret.Get(0).(func(*int64, *string, *string) *models.ListAutoUserProvisioningRulesResponse); ok {
		r0 = rf(limit, start, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ListAutoUserProvisioningRulesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*int64, *string, *string) *apiutils.APIError); ok {
		r1 = rf(limit, start, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockAutoUserProvisioningRuleClient_ListAutoUserProvisioningRules_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAutoUserProvisioningRules'
type MockAutoUserProvisioningRuleClient_ListAutoUserProvisioningRules_Call struct {
	*mock.Call
}

// ListAutoUserProvisioningRules is a helper method to define mock.On call
//   - limit *int64
//   - start *string
//   - filter *string
func (_e *MockAutoUserProvisioningRuleClient_Expecter) ListAutoUserProvisioningRules(limit interface{}, start interface{}, filter interface{}) *MockAutoUserProvisioningRuleClient_ListAutoUserProvisioningRules_Call {
	return &MockAutoUserProvisioningRuleClient_ListAutoUserProvisioningRules_Call{Call: _e.mock.On("ListAutoUserProvisioningRules", limit, start, filter)}
}

func (_c *MockAutoUserProvisioningRuleClient_ListAutoUserProvisioningRules_Call) Run(run func(limit *int64, start *string, filter *string)) *MockAutoUserProvisioningRuleClient_ListAutoUserProvisioningRules_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*int64), args[1].(*string), args[2].(*string))
	})
	return _c
}

func (_c *MockAutoUserProvisioningRuleClient_ListAutoUserProvisioningRules_Call) Return(_a0 *models.ListAutoUserProvisioningRulesResponse, _a1 *apiutils.APIError) *MockAutoUserProvisioningRuleClient_ListAutoUserProvisioningRules_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAutoUserProvisioningRuleClient_ListAutoUserProvisioningRules_Call) RunAndReturn(run func(*int64, *string, *string) (*models.ListAutoUserProvisioningRulesResponse, *apiutils.APIError)) *MockAutoUserProvisioningRuleClient_ListAutoUserProvisioningRules_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAutoUserProvisioningRule provides a mock function with given fields: ruleId
func (_m *MockAutoUserProvisioningRuleClient) ReadAutoUserProvisioningRule(ruleId string) (*models.ReadAutoUserProvisioningRuleResponse, *apiutils.APIError) {
	ret := _m.Called(ruleId)

	if len(ret) == 0 {
		panic("no return value specified for ReadAutoUserProvisioningRule")
	}

	var r0 *models.ReadAutoUserProvisioningRuleResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string) (*models.ReadAutoUserProvisioningRuleResponse, *apiutils.APIError)); ok {
		return rf(ruleId)
	}
	if rf, ok := ret.Get(0).(func(string) *models.ReadAutoUserProvisioningRuleResponse); ok {
		r0 = rf(ruleId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ReadAutoUserProvisioningRuleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *apiutils.APIError); ok {
		r1 = rf(ruleId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockAutoUserProvisioningRuleClient_ReadAutoUserProvisioningRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAutoUserProvisioningRule'
type MockAutoUserProvisioningRuleClient_ReadAutoUserProvisioningRule_Call struct {
	*mock.Call
}

// ReadAutoUserProvisioningRule is a helper method to define mock.On call
//   - ruleId string
func (_e *MockAutoUserProvisioningRuleClient_Expecter) ReadAutoUserProvisioningRule(ruleId interface{}) *MockAutoUserProvisioningRuleClient_ReadAutoUserProvisioningRule_Call {
	return &MockAutoUserProvisioningRuleClient_ReadAutoUserProvisioningRule_Call{Call: _e.mock.On("ReadAutoUserProvisioningRule", ruleId)}
}

func (_c *MockAutoUserProvisioningRuleClient_ReadAutoUserProvisioningRule_Call) Run(run func(ruleId string)) *MockAutoUserProvisioningRuleClient_ReadAutoUserProvisioningRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAutoUserProvisioningRuleClient_ReadAutoUserProvisioningRule_Call) Return(_a0 *models.ReadAutoUserProvisioningRuleResponse, _a1 *apiutils.APIError) *MockAutoUserProvisioningRuleClient_ReadAutoUserProvisioningRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAutoUserProvisioningRuleClient_ReadAutoUserProvisioningRule_Call) RunAndReturn(run func(string) (*models.ReadAutoUserProvisioningRuleResponse, *apiutils.APIError)) *MockAutoUserProvisioningRuleClient_ReadAutoUserProvisioningRule_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAutoUserProvisioningRule provides a mock function with given fields: ruleId, body
func (_m *MockAutoUserProvisioningRuleClient) UpdateAutoUserProvisioningRule(ruleId string, body *models.UpdateAutoUserProvisioningRuleV1Request) (*models.UpdateAutoUserProvisioningRuleResponse, *apiutils.APIError) {
	ret := _m.Called(ruleId, body)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAutoUserProvisioningRule")
	}

	var r0 *models.UpdateAutoUserProvisioningRuleResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string, *models.UpdateAutoUserProvisioningRuleV1Request) (*models.UpdateAutoUserProvisioningRuleResponse, *apiutils.APIError)); ok {
		return rf(ruleId, body)
	}
	if rf, ok := ret.Get(0).(func(string, *models.UpdateAutoUserProvisioningRuleV1Request) *models.UpdateAutoUserProvisioningRuleResponse); ok {
		r0 = rf(ruleId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UpdateAutoUserProvisioningRuleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *models.UpdateAutoUserProvisioningRuleV1Request) *apiutils.APIError); ok {
		r1 = rf(ruleId, body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockAutoUserProvisioningRuleClient_UpdateAutoUserProvisioningRule_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAutoUserProvisioningRule'
type MockAutoUserProvisioningRuleClient_UpdateAutoUserProvisioningRule_Call struct {
	*mock.Call
}

// UpdateAutoUserProvisioningRule is a helper method to define mock.On call
//   - ruleId string
//   - body *models.UpdateAutoUserProvisioningRuleV1Request
func (_e *MockAutoUserProvisioningRuleClient_Expecter) UpdateAutoUserProvisioningRule(ruleId interface{}, body interface{}) *MockAutoUserProvisioningRuleClient_UpdateAutoUserProvisioningRule_Call {
	return &MockAutoUserProvisioningRuleClient_UpdateAutoUserProvisioningRule_Call{Call: _e.mock.On("UpdateAutoUserProvisioningRule", ruleId, body)}
}

func (_c *MockAutoUserProvisioningRuleClient_UpdateAutoUserProvisioningRule_Call) Run(run func(ruleId string, body *models.UpdateAutoUserProvisioningRuleV1Request)) *MockAutoUserProvisioningRuleClient_UpdateAutoUserProvisioningRule_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*models.UpdateAutoUserProvisioningRuleV1Request))
	})
	return _c
}

func (_c *MockAutoUserProvisioningRuleClient_UpdateAutoUserProvisioningRule_Call) Return(_a0 *models.UpdateAutoUserProvisioningRuleResponse, _a1 *apiutils.APIError) *MockAutoUserProvisioningRuleClient_UpdateAutoUserProvisioningRule_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAutoUserProvisioningRuleClient_UpdateAutoUserProvisioningRule_Call) RunAndReturn(run func(string, *models.UpdateAutoUserProvisioningRuleV1Request) (*models.UpdateAutoUserProvisioningRuleResponse, *apiutils.APIError)) *MockAutoUserProvisioningRuleClient_UpdateAutoUserProvisioningRule_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAutoUserProvisioningRuleClient creates a new instance of MockAutoUserProvisioningRuleClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAutoUserProvisioningRuleClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAutoUserProvisioningRuleClient {
	mock := &MockAutoUserProvisioningRuleClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
