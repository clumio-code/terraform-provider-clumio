// Code generated by mockery. DO NOT EDIT.

package sdkclients

import (
	apiutils "github.com/clumio-code/clumio-go-sdk/api_utils"
	mock "github.com/stretchr/testify/mock"

	models "github.com/clumio-code/clumio-go-sdk/models"
)

// MockDynamoDBTableClient is an autogenerated mock type for the DynamoDBTableClient type
type MockDynamoDBTableClient struct {
	mock.Mock
}

type MockDynamoDBTableClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDynamoDBTableClient) EXPECT() *MockDynamoDBTableClient_Expecter {
	return &MockDynamoDBTableClient_Expecter{mock: &_m.Mock}
}

// ListAwsDynamodbTables provides a mock function with given fields: limit, start, filter, embed
func (_m *MockDynamoDBTableClient) ListAwsDynamodbTables(limit *int64, start *string, filter *string, embed *string) (*models.ListDynamoDBTableResponse, *apiutils.APIError) {
	ret := _m.Called(limit, start, filter, embed)

	if len(ret) == 0 {
		panic("no return value specified for ListAwsDynamodbTables")
	}

	var r0 *models.ListDynamoDBTableResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(*int64, *string, *string, *string) (*models.ListDynamoDBTableResponse, *apiutils.APIError)); ok {
		return rf(limit, start, filter, embed)
	}
	if rf, ok := ret.Get(0).(func(*int64, *string, *string, *string) *models.ListDynamoDBTableResponse); ok {
		r0 = rf(limit, start, filter, embed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ListDynamoDBTableResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*int64, *string, *string, *string) *apiutils.APIError); ok {
		r1 = rf(limit, start, filter, embed)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockDynamoDBTableClient_ListAwsDynamodbTables_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAwsDynamodbTables'
type MockDynamoDBTableClient_ListAwsDynamodbTables_Call struct {
	*mock.Call
}

// ListAwsDynamodbTables is a helper method to define mock.On call
//   - limit *int64
//   - start *string
//   - filter *string
//   - embed *string
func (_e *MockDynamoDBTableClient_Expecter) ListAwsDynamodbTables(limit interface{}, start interface{}, filter interface{}, embed interface{}) *MockDynamoDBTableClient_ListAwsDynamodbTables_Call {
	return &MockDynamoDBTableClient_ListAwsDynamodbTables_Call{Call: _e.mock.On("ListAwsDynamodbTables", limit, start, filter, embed)}
}

func (_c *MockDynamoDBTableClient_ListAwsDynamodbTables_Call) Run(run func(limit *int64, start *string, filter *string, embed *string)) *MockDynamoDBTableClient_ListAwsDynamodbTables_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*int64), args[1].(*string), args[2].(*string), args[3].(*string))
	})
	return _c
}

func (_c *MockDynamoDBTableClient_ListAwsDynamodbTables_Call) Return(_a0 *models.ListDynamoDBTableResponse, _a1 *apiutils.APIError) *MockDynamoDBTableClient_ListAwsDynamodbTables_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBTableClient_ListAwsDynamodbTables_Call) RunAndReturn(run func(*int64, *string, *string, *string) (*models.ListDynamoDBTableResponse, *apiutils.APIError)) *MockDynamoDBTableClient_ListAwsDynamodbTables_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAwsDynamodbTable provides a mock function with given fields: tableId, embed
func (_m *MockDynamoDBTableClient) ReadAwsDynamodbTable(tableId string, embed *string) (*models.ReadDynamoDBTableResponse, *apiutils.APIError) {
	ret := _m.Called(tableId, embed)

	if len(ret) == 0 {
		panic("no return value specified for ReadAwsDynamodbTable")
	}

	var r0 *models.ReadDynamoDBTableResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string, *string) (*models.ReadDynamoDBTableResponse, *apiutils.APIError)); ok {
		return rf(tableId, embed)
	}
	if rf, ok := ret.Get(0).(func(string, *string) *models.ReadDynamoDBTableResponse); ok {
		r0 = rf(tableId, embed)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ReadDynamoDBTableResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *string) *apiutils.APIError); ok {
		r1 = rf(tableId, embed)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockDynamoDBTableClient_ReadAwsDynamodbTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAwsDynamodbTable'
type MockDynamoDBTableClient_ReadAwsDynamodbTable_Call struct {
	*mock.Call
}

// ReadAwsDynamodbTable is a helper method to define mock.On call
//   - tableId string
//   - embed *string
func (_e *MockDynamoDBTableClient_Expecter) ReadAwsDynamodbTable(tableId interface{}, embed interface{}) *MockDynamoDBTableClient_ReadAwsDynamodbTable_Call {
	return &MockDynamoDBTableClient_ReadAwsDynamodbTable_Call{Call: _e.mock.On("ReadAwsDynamodbTable", tableId, embed)}
}

func (_c *MockDynamoDBTableClient_ReadAwsDynamodbTable_Call) Run(run func(tableId string, embed *string)) *MockDynamoDBTableClient_ReadAwsDynamodbTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*string))
	})
	return _c
}

func (_c *MockDynamoDBTableClient_ReadAwsDynamodbTable_Call) Return(_a0 *models.ReadDynamoDBTableResponse, _a1 *apiutils.APIError) *MockDynamoDBTableClient_ReadAwsDynamodbTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDynamoDBTableClient_ReadAwsDynamodbTable_Call) RunAndReturn(run func(string, *string) (*models.ReadDynamoDBTableResponse, *apiutils.APIError)) *MockDynamoDBTableClient_ReadAwsDynamodbTable_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDynamoDBTableClient creates a new instance of MockDynamoDBTableClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDynamoDBTableClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDynamoDBTableClient {
	mock := &MockDynamoDBTableClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
