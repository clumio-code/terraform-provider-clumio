// Code generated by mockery. DO NOT EDIT.

package sdkclients

import (
	apiutils "github.com/clumio-code/clumio-go-sdk/api_utils"
	mock "github.com/stretchr/testify/mock"

	models "github.com/clumio-code/clumio-go-sdk/models"
)

// MockS3BucketClient is an autogenerated mock type for the S3BucketClient type
type MockS3BucketClient struct {
	mock.Mock
}

type MockS3BucketClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockS3BucketClient) EXPECT() *MockS3BucketClient_Expecter {
	return &MockS3BucketClient_Expecter{mock: &_m.Mock}
}

// ListAwsS3Buckets provides a mock function with given fields: limit, start, filter
func (_m *MockS3BucketClient) ListAwsS3Buckets(limit *int64, start *string, filter *string) (*models.ListBucketsResponse, *apiutils.APIError) {
	ret := _m.Called(limit, start, filter)

	if len(ret) == 0 {
		panic("no return value specified for ListAwsS3Buckets")
	}

	var r0 *models.ListBucketsResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(*int64, *string, *string) (*models.ListBucketsResponse, *apiutils.APIError)); ok {
		return rf(limit, start, filter)
	}
	if rf, ok := ret.Get(0).(func(*int64, *string, *string) *models.ListBucketsResponse); ok {
		r0 = rf(limit, start, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ListBucketsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*int64, *string, *string) *apiutils.APIError); ok {
		r1 = rf(limit, start, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockS3BucketClient_ListAwsS3Buckets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListAwsS3Buckets'
type MockS3BucketClient_ListAwsS3Buckets_Call struct {
	*mock.Call
}

// ListAwsS3Buckets is a helper method to define mock.On call
//   - limit *int64
//   - start *string
//   - filter *string
func (_e *MockS3BucketClient_Expecter) ListAwsS3Buckets(limit interface{}, start interface{}, filter interface{}) *MockS3BucketClient_ListAwsS3Buckets_Call {
	return &MockS3BucketClient_ListAwsS3Buckets_Call{Call: _e.mock.On("ListAwsS3Buckets", limit, start, filter)}
}

func (_c *MockS3BucketClient_ListAwsS3Buckets_Call) Run(run func(limit *int64, start *string, filter *string)) *MockS3BucketClient_ListAwsS3Buckets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*int64), args[1].(*string), args[2].(*string))
	})
	return _c
}

func (_c *MockS3BucketClient_ListAwsS3Buckets_Call) Return(_a0 *models.ListBucketsResponse, _a1 *apiutils.APIError) *MockS3BucketClient_ListAwsS3Buckets_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockS3BucketClient_ListAwsS3Buckets_Call) RunAndReturn(run func(*int64, *string, *string) (*models.ListBucketsResponse, *apiutils.APIError)) *MockS3BucketClient_ListAwsS3Buckets_Call {
	_c.Call.Return(run)
	return _c
}

// ReadAwsS3Bucket provides a mock function with given fields: bucketId
func (_m *MockS3BucketClient) ReadAwsS3Bucket(bucketId string) (*models.ReadBucketResponse, *apiutils.APIError) {
	ret := _m.Called(bucketId)

	if len(ret) == 0 {
		panic("no return value specified for ReadAwsS3Bucket")
	}

	var r0 *models.ReadBucketResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string) (*models.ReadBucketResponse, *apiutils.APIError)); ok {
		return rf(bucketId)
	}
	if rf, ok := ret.Get(0).(func(string) *models.ReadBucketResponse); ok {
		r0 = rf(bucketId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ReadBucketResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *apiutils.APIError); ok {
		r1 = rf(bucketId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockS3BucketClient_ReadAwsS3Bucket_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadAwsS3Bucket'
type MockS3BucketClient_ReadAwsS3Bucket_Call struct {
	*mock.Call
}

// ReadAwsS3Bucket is a helper method to define mock.On call
//   - bucketId string
func (_e *MockS3BucketClient_Expecter) ReadAwsS3Bucket(bucketId interface{}) *MockS3BucketClient_ReadAwsS3Bucket_Call {
	return &MockS3BucketClient_ReadAwsS3Bucket_Call{Call: _e.mock.On("ReadAwsS3Bucket", bucketId)}
}

func (_c *MockS3BucketClient_ReadAwsS3Bucket_Call) Run(run func(bucketId string)) *MockS3BucketClient_ReadAwsS3Bucket_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockS3BucketClient_ReadAwsS3Bucket_Call) Return(_a0 *models.ReadBucketResponse, _a1 *apiutils.APIError) *MockS3BucketClient_ReadAwsS3Bucket_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockS3BucketClient_ReadAwsS3Bucket_Call) RunAndReturn(run func(string) (*models.ReadBucketResponse, *apiutils.APIError)) *MockS3BucketClient_ReadAwsS3Bucket_Call {
	_c.Call.Return(run)
	return _c
}

// SetBucketProperties provides a mock function with given fields: bucketId, body
func (_m *MockS3BucketClient) SetBucketProperties(bucketId string, body *models.SetBucketPropertiesV1Request) (*models.SetBucketPropertiesResponse, *apiutils.APIError) {
	ret := _m.Called(bucketId, body)

	if len(ret) == 0 {
		panic("no return value specified for SetBucketProperties")
	}

	var r0 *models.SetBucketPropertiesResponse
	var r1 *apiutils.APIError
	if rf, ok := ret.Get(0).(func(string, *models.SetBucketPropertiesV1Request) (*models.SetBucketPropertiesResponse, *apiutils.APIError)); ok {
		return rf(bucketId, body)
	}
	if rf, ok := ret.Get(0).(func(string, *models.SetBucketPropertiesV1Request) *models.SetBucketPropertiesResponse); ok {
		r0 = rf(bucketId, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SetBucketPropertiesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *models.SetBucketPropertiesV1Request) *apiutils.APIError); ok {
		r1 = rf(bucketId, body)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*apiutils.APIError)
		}
	}

	return r0, r1
}

// MockS3BucketClient_SetBucketProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetBucketProperties'
type MockS3BucketClient_SetBucketProperties_Call struct {
	*mock.Call
}

// SetBucketProperties is a helper method to define mock.On call
//   - bucketId string
//   - body *models.SetBucketPropertiesV1Request
func (_e *MockS3BucketClient_Expecter) SetBucketProperties(bucketId interface{}, body interface{}) *MockS3BucketClient_SetBucketProperties_Call {
	return &MockS3BucketClient_SetBucketProperties_Call{Call: _e.mock.On("SetBucketProperties", bucketId, body)}
}

func (_c *MockS3BucketClient_SetBucketProperties_Call) Run(run func(bucketId string, body *models.SetBucketPropertiesV1Request)) *MockS3BucketClient_SetBucketProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*models.SetBucketPropertiesV1Request))
	})
	return _c
}

func (_c *MockS3BucketClient_SetBucketProperties_Call) Return(_a0 *models.SetBucketPropertiesResponse, _a1 *apiutils.APIError) *MockS3BucketClient_SetBucketProperties_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockS3BucketClient_SetBucketProperties_Call) RunAndReturn(run func(string, *models.SetBucketPropertiesV1Request) (*models.SetBucketPropertiesResponse, *apiutils.APIError)) *MockS3BucketClient_SetBucketProperties_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockS3BucketClient creates a new instance of MockS3BucketClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockS3BucketClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockS3BucketClient {
	mock := &MockS3BucketClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
